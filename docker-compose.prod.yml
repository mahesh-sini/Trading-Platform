# Production Docker Compose configuration
# Usage: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d

version: '3.8'

services:
  postgres:
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
    restart: always
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  redis:
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
    volumes:
      - redis_prod_data:/data
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  influxdb:
    environment:
      DOCKER_INFLUXDB_INIT_PASSWORD: ${INFLUXDB_ADMIN_PASSWORD}
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: ${INFLUXDB_ADMIN_TOKEN}
    volumes:
      - influxdb_prod_data:/var/lib/influxdb2
      - influxdb_prod_config:/etc/influxdb2
    restart: always
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  backend:
    environment:
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/trading_platform
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      SECRET_KEY: ${SECRET_KEY}
      ENVIRONMENT: production
      DEBUG: false
      CORS_ORIGINS: ${CORS_ORIGINS}
      ALPACA_API_KEY: ${ALPACA_API_KEY}
      ALPACA_SECRET_KEY: ${ALPACA_SECRET_KEY}
    volumes:
      - backend_logs:/home/app/logs
    restart: always
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
    command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "4"]

  data-service:
    environment:
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      INFLUXDB_TOKEN: ${INFLUXDB_ADMIN_TOKEN}
      ALPHA_VANTAGE_API_KEY: ${ALPHA_VANTAGE_API_KEY}
      ENVIRONMENT: production
      DEBUG: false
    volumes:
      - data_service_logs:/home/app/logs
    restart: always
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
    command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8002", "--workers", "2"]

  ml-service:
    environment:
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      ENVIRONMENT: production
      DEBUG: false
    volumes:
      - ml_service_logs:/home/app/logs
      - ml_models:/home/app/models
    restart: always
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
    command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8003", "--workers", "2"]

  frontend:
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      NEXT_PUBLIC_DATA_SERVICE_URL: ${NEXT_PUBLIC_DATA_SERVICE_URL}
      NEXT_PUBLIC_ML_SERVICE_URL: ${NEXT_PUBLIC_ML_SERVICE_URL}
      NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL}
    restart: always
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Production-specific services
  nginx:
    image: nginx:alpine
    container_name: trading_platform_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
      - data-service
      - ml-service
    restart: always
    networks:
      - default

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: trading_platform_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    restart: always
    networks:
      - default

  grafana:
    image: grafana/grafana:latest
    container_name: trading_platform_grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: always
    networks:
      - default

volumes:
  postgres_prod_data:
  redis_prod_data:
  influxdb_prod_data:
  influxdb_prod_config:
  backend_logs:
  data_service_logs:
  ml_service_logs:
  ml_models:
  nginx_logs:
  prometheus_data:
  grafana_data: