name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      release_notes:
        description: 'Release notes'
        required: false
        type: string

jobs:
  # Validate Release
  validate-release:
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.validate.outputs.version }}
      tag: ${{ steps.validate.outputs.tag }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Validate version format
      id: validate
      run: |
        version="${{ github.event.inputs.version }}"
        if [[ ! $version =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
          echo "Invalid version format. Use semantic versioning (e.g., v1.0.0)"
          exit 1
        fi
        echo "version=${version}" >> $GITHUB_OUTPUT
        echo "tag=${version}" >> $GITHUB_OUTPUT
    
    - name: Check if tag exists
      run: |
        if git rev-parse "${{ steps.validate.outputs.tag }}" >/dev/null 2>&1; then
          echo "Tag ${{ steps.validate.outputs.tag }} already exists"
          exit 1
        fi

  # Run All Tests
  run-tests:
    needs: validate-release
    uses: ./.github/workflows/ci-cd.yml

  # Build Release Assets
  build-release:
    needs: [validate-release, run-tests]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push release images
      run: |
        services=("backend" "frontend" "data-service" "ml-service")
        for service in "${services[@]}"; do
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --tag ghcr.io/${{ github.repository }}-${service}:${{ needs.validate-release.outputs.version }} \
            --tag ghcr.io/${{ github.repository }}-${service}:latest \
            --push \
            ./${service}/
        done
    
    - name: Build frontend for release
      run: |
        cd frontend
        npm ci
        npm run build
        tar -czf ../trading-platform-frontend-${{ needs.validate-release.outputs.version }}.tar.gz dist/
    
    - name: Create deployment package
      run: |
        mkdir release-package
        cp -r docker-compose.yml release-package/
        cp -r kubernetes/ release-package/
        cp -r scripts/ release-package/
        cp README.md release-package/
        tar -czf trading-platform-deployment-${{ needs.validate-release.outputs.version }}.tar.gz release-package/
    
    - name: Upload release assets
      uses: actions/upload-artifact@v4
      with:
        name: release-assets
        path: |
          trading-platform-frontend-${{ needs.validate-release.outputs.version }}.tar.gz
          trading-platform-deployment-${{ needs.validate-release.outputs.version }}.tar.gz

  # Create GitHub Release
  create-release:
    needs: [validate-release, build-release]
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download release assets
      uses: actions/download-artifact@v3
      with:
        name: release-assets
    
    - name: Generate changelog
      id: changelog
      run: |
        # Get commits since last tag
        last_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        if [ -n "$last_tag" ]; then
          changelog=$(git log --pretty=format:"- %s (%h)" ${last_tag}..HEAD)
        else
          changelog=$(git log --pretty=format:"- %s (%h)" --max-count=20)
        fi
        
        # Save changelog to file
        cat > changelog.md << EOF
        ## What's Changed
        
        $changelog
        
        ## Release Notes
        ${{ github.event.inputs.release_notes }}
        
        ## Docker Images
        - \`ghcr.io/${{ github.repository }}-backend:${{ needs.validate-release.outputs.version }}\`
        - \`ghcr.io/${{ github.repository }}-frontend:${{ needs.validate-release.outputs.version }}\`
        - \`ghcr.io/${{ github.repository }}-data-service:${{ needs.validate-release.outputs.version }}\`
        - \`ghcr.io/${{ github.repository }}-ml-service:${{ needs.validate-release.outputs.version }}\`
        EOF
        
        echo "changelog_file=changelog.md" >> $GITHUB_OUTPUT
    
    - name: Create Release
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.validate-release.outputs.tag }}
        release_name: Trading Platform ${{ needs.validate-release.outputs.version }}
        body_path: ${{ steps.changelog.outputs.changelog_file }}
        draft: false
        prerelease: ${{ contains(needs.validate-release.outputs.version, '-') }}
    
    - name: Upload Frontend Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./trading-platform-frontend-${{ needs.validate-release.outputs.version }}.tar.gz
        asset_name: trading-platform-frontend-${{ needs.validate-release.outputs.version }}.tar.gz
        asset_content_type: application/gzip
    
    - name: Upload Deployment Package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./trading-platform-deployment-${{ needs.validate-release.outputs.version }}.tar.gz
        asset_name: trading-platform-deployment-${{ needs.validate-release.outputs.version }}.tar.gz
        asset_content_type: application/gzip

  # Deploy to Production
  deploy-production:
    needs: [validate-release, create-release]
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying Trading Platform ${{ needs.validate-release.outputs.version }} to production..."
        # Add production deployment commands here
    
    - name: Post-deployment verification
      run: |
        echo "Running post-deployment verification..."
        # Add verification commands here
    
    - name: Notify release completion
      run: |
        echo "Trading Platform ${{ needs.validate-release.outputs.version }} has been successfully released!"
        # Add notification logic here