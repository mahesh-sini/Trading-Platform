# CI/CD Pipeline for AI Trading Platform
name: Deploy Trading Platform

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: trading-platform

jobs:
  # Security and Quality Checks
  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Test Backend
  test-backend:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_trading_platform
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio
    
    - name: Set up environment variables
      run: |
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_trading_platform" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV
        echo "ENVIRONMENT=test" >> $GITHUB_ENV
    
    - name: Run database migrations
      run: |
        cd backend
        python -m alembic upgrade head
    
    - name: Run backend tests
      run: |
        cd backend
        python -m pytest tests/ -v --cov=. --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend

  # Test Frontend
  test-frontend:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run frontend linting
      run: |
        cd frontend
        npm run lint
    
    - name: Run frontend tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false
    
    - name: Upload frontend coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/clover.xml
        flags: frontend

  # Build and Push Docker Images
  build:
    needs: [security, test-backend, test-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    strategy:
      matrix:
        service: [backend, frontend, ml_models, data]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: ./${{ matrix.service }}
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1

  # Deploy to Staging
  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --name trading-platform-staging --region ${{ secrets.AWS_REGION }}
    
    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'
    
    - name: Deploy to staging
      run: |
        helm upgrade --install trading-platform-staging ./helm/trading-platform \
          -f ./helm/trading-platform/values-staging.yaml \
          --set global.image.tag=${{ github.sha }} \
          --set global.environment=staging \
          --namespace trading-platform \
          --create-namespace \
          --wait \
          --timeout=10m
    
    - name: Run health checks
      run: |
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=trading-platform -n trading-platform --timeout=300s
        kubectl get pods -n trading-platform
    
    - name: Run smoke tests
      run: |
        # Wait for services to be ready
        sleep 60
        
        # Test API health endpoint
        kubectl run curl-test --image=curlimages/curl:latest --rm -i --restart=Never \
          -- curl -f http://backend-api-service.trading-platform.svc.cluster.local/health
        
        # Test frontend
        kubectl run curl-test --image=curlimages/curl:latest --rm -i --restart=Never \
          -- curl -f http://frontend-service.trading-platform.svc.cluster.local/api/health

  # Deploy to Production
  deploy-production:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --name trading-platform-production --region ${{ secrets.AWS_REGION }}
    
    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'
    
    - name: Deploy to production
      run: |
        helm upgrade --install trading-platform-production ./helm/trading-platform \
          -f ./helm/trading-platform/values-production.yaml \
          --set global.image.tag=${{ github.sha }} \
          --set global.environment=production \
          --namespace trading-platform \
          --create-namespace \
          --wait \
          --timeout=15m
    
    - name: Run health checks
      run: |
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=trading-platform -n trading-platform --timeout=600s
        kubectl get pods -n trading-platform
    
    - name: Run production smoke tests
      run: |
        # Wait for services to be ready
        sleep 120
        
        # Test API health endpoint
        kubectl run curl-test --image=curlimages/curl:latest --rm -i --restart=Never \
          -- curl -f http://backend-api-service.trading-platform.svc.cluster.local/health
        
        # Test all services
        kubectl run curl-test --image=curlimages/curl:latest --rm -i --restart=Never \
          -- curl -f http://frontend-service.trading-platform.svc.cluster.local/api/health
        
        kubectl run curl-test --image=curlimages/curl:latest --rm -i --restart=Never \
          -- curl -f http://ml-service-service.trading-platform.svc.cluster.local/health
        
        kubectl run curl-test --image=curlimages/curl:latest --rm -i --restart=Never \
          -- curl -f http://data-service-service.trading-platform.svc.cluster.local/health
    
    - name: Notify team
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: "✅ Production deployment successful! Trading Platform is now live."
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
    
    - name: Notify team on failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: "❌ Production deployment failed! Please check the logs."
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Cleanup old images
  cleanup:
    needs: [deploy-staging, deploy-production]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Delete old container images
      uses: actions/delete-package-versions@v4
      with:
        package-name: trading-platform-backend
        package-type: container
        min-versions-to-keep: 10
        delete-only-untagged-versions: false